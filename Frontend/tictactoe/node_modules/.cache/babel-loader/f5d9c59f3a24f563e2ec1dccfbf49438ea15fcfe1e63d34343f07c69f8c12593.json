{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachListeners = void 0;\nvar socket_io_1 = require(\"./socket-io\");\nvar constants_1 = require(\"./constants\");\nvar util_1 = require(\"./util\");\nvar bindMessageHandler = function (webSocketInstance, optionsRef, setLastMessage) {\n  webSocketInstance.onmessage = function (message) {\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    setLastMessage(message);\n  };\n};\nvar bindOpenHandler = function (webSocketInstance, optionsRef, setReadyState, reconnectCount) {\n  webSocketInstance.onopen = function (event) {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(constants_1.ReadyState.OPEN);\n  };\n};\nvar bindCloseHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n  if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return function () {};\n  }\n  (0, util_1.assertIsWebSocket)(webSocketInstance, optionsRef.current.skipAssert);\n  var reconnectTimeout;\n  webSocketInstance.onclose = function (event) {\n    var _a;\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(constants_1.ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      var reconnectAttempts = (_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        var nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ? optionsRef.current.reconnectInterval(reconnectCount.current) : optionsRef.current.reconnectInterval;\n        reconnectTimeout = window.setTimeout(function () {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval !== null && nextReconnectInterval !== void 0 ? nextReconnectInterval : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(\"Max reconnect attempts of \".concat(reconnectAttempts, \" exceeded\"));\n      }\n    }\n  };\n  return function () {\n    return reconnectTimeout && window.clearTimeout(reconnectTimeout);\n  };\n};\nvar bindErrorHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n  var reconnectTimeout;\n  webSocketInstance.onerror = function (error) {\n    var _a;\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose(__assign(__assign({}, error), {\n        code: 1006,\n        reason: \"An error occurred with the EventSource: \".concat(error),\n        wasClean: false\n      }));\n      setReadyState(constants_1.ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < ((_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT)) {\n        var nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ? optionsRef.current.reconnectInterval(reconnectCount.current) : optionsRef.current.reconnectInterval;\n        reconnectTimeout = window.setTimeout(function () {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval !== null && nextReconnectInterval !== void 0 ? nextReconnectInterval : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts);\n        console.warn(\"Max reconnect attempts of \".concat(optionsRef.current.reconnectAttempts, \" exceeded\"));\n      }\n    }\n  };\n  return function () {\n    return reconnectTimeout && window.clearTimeout(reconnectTimeout);\n  };\n};\nvar attachListeners = function (webSocketInstance, setters, optionsRef, reconnect, reconnectCount, sendMessage) {\n  var setLastMessage = setters.setLastMessage,\n    setReadyState = setters.setReadyState;\n  var interval;\n  var cancelReconnectOnClose;\n  var cancelReconnectOnError;\n  if (optionsRef.current.fromSocketIO) {\n    interval = (0, socket_io_1.setUpSocketIOPing)(sendMessage);\n  }\n  bindMessageHandler(webSocketInstance, optionsRef, setLastMessage);\n  bindOpenHandler(webSocketInstance, optionsRef, setReadyState, reconnectCount);\n  cancelReconnectOnClose = bindCloseHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n  cancelReconnectOnError = bindErrorHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n  return function () {\n    setReadyState(constants_1.ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\nexports.attachListeners = attachListeners;","map":{"version":3,"mappings":"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","names":["bindMessageHandler","webSocketInstance","optionsRef","setLastMessage","onmessage","message","current","onMessage","filter","bindOpenHandler","setReadyState","reconnectCount","onopen","event","onOpen","constants_1","OPEN","bindCloseHandler","reconnect","EventSource","skipAssert","reconnectTimeout","onclose","onClose","CLOSED","shouldReconnect","reconnectAttempts","nextReconnectInterval","reconnectInterval","window","setTimeout","onReconnectStop","console","warn","clearTimeout","bindErrorHandler","onerror","error","onError","code","reason","wasClean","close","retryOnError","attachListeners","setters","sendMessage","interval","cancelReconnectOnClose","cancelReconnectOnError","fromSocketIO","CLOSING","clearInterval","exports"],"sources":["C:\\Users\\Saad\\tictactoe\\Frontend\\tictactoe\\node_modules\\react-use-websocket\\src\\lib\\attach-listener.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\nimport { setUpSocketIOPing } from './socket-io';\nimport {\n  DEFAULT_RECONNECT_LIMIT,\n  DEFAULT_RECONNECT_INTERVAL_MS,\n  ReadyState,\n  isEventSourceSupported,\n} from './constants';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { assertIsWebSocket } from './util';\n\nexport interface Setters {\n  setLastMessage: (message: WebSocketEventMap['message']) => void;\n  setReadyState: (readyState: ReadyState) => void;\n}\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: Setters['setLastMessage'],\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    setLastMessage(message);\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnectCount: MutableRefObject<number>,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(ReadyState.OPEN);\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return () => {};\n  }\n  assertIsWebSocket(webSocketInstance, optionsRef.current.skipAssert);\n  let reconnectTimeout: number;\n\n  webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\n          optionsRef.current.reconnectInterval;\n\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  let reconnectTimeout: number;\n\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose({\n        ...error,\n        code: 1006,\n        reason: `An error occurred with the EventSource: ${error}`,\n        wasClean: false,\n      });\n\n      setReadyState(ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n    \n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\n          optionsRef.current.reconnectInterval;\n\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts as number);\n        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nexport const attachListeners = (\n    webSocketInstance: WebSocketLike,\n    setters: Setters,\n    optionsRef: MutableRefObject<Options>,\n    reconnect: () => void,\n    reconnectCount: MutableRefObject<number>,\n    sendMessage: SendMessage,\n  ): (() => void) => {\n  const { setLastMessage, setReadyState } = setters;\n\n  let interval: number;\n  let cancelReconnectOnClose: () => void;\n  let cancelReconnectOnError: () => void;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(\n    webSocketInstance,\n    optionsRef,\n    setLastMessage,\n  );\n\n  bindOpenHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnectCount,\n  );\n\n  cancelReconnectOnClose = bindCloseHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  cancelReconnectOnError = bindErrorHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  return () => {\n    setReadyState(ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}